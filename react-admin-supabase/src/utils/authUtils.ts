import { supabase } from '../supabaseClient';

export type UserRoleData = {
  id: string;
  email: string;
  role: 'admin' | 'user';
  is_active: boolean;
};

export interface AuthResult {
  success: boolean;
  userData?: UserRoleData;
  error?: string;
  isAdmin?: boolean;
}

/**
 * Ki·ªÉm tra quy·ªÅn admin c·ªßa user hi·ªán t·∫°i
 * @returns Promise<AuthResult>
 */
export const checkAdminRole = async (): Promise<AuthResult> => {
  try {
    console.log('üîç [AUTH] Checking admin role...');
    
    // L·∫•y user hi·ªán t·∫°i t·ª´ auth session
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå [AUTH] Auth error:', authError);
      return {
        success: false,
        error: `L·ªói x√°c th·ª±c: ${authError.message}`
      };
    }

    if (!user) {
      console.warn('‚ö†Ô∏è [AUTH] No authenticated user');
      return {
        success: false,
        error: 'Kh√¥ng c√≥ user ƒëƒÉng nh·∫≠p'
      };
    }

    console.log('üë§ [AUTH] Authenticated user:', { 
      userId: user.id, 
      email: user.email 
    });

    // L·∫•y th√¥ng tin role t·ª´ database
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, role, is_active')
      .eq('id', user.id)
      .maybeSingle();

    console.log('üîç [AUTH] User data fetch result:', { 
      userId: user.id, 
      userData, 
      userError: userError?.message 
    });

    if (userError) {
      console.error('‚ùå [AUTH] Database error:', userError);
      return {
        success: false,
        error: `L·ªói c∆° s·ªü d·ªØ li·ªáu: ${userError.message}`
      };
    }

    if (!userData) {
      console.warn('‚ö†Ô∏è [AUTH] User not found in database:', { 
        email: user.email, 
        userId: user.id 
      });
      return {
        success: false,
        error: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
      };
    }

    if (!userData.is_active) {
      console.warn('‚ö†Ô∏è [AUTH] User account is inactive:', { 
        email: userData.email, 
        userId: userData.id 
      });
      return {
        success: false,
        error: 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      };
    }

    const isAdmin = userData.role === 'admin';
    
    console.log('üë§ [AUTH] Role check result:', { 
      isAdmin, 
      role: userData.role, 
      isActive: userData.is_active,
      email: userData.email 
    });

    return {
      success: true,
      userData,
      isAdmin
    };

  } catch (error: any) {
    console.error('‚ùå [AUTH] Unexpected error:', error);
    return {
      success: false,
      error: error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën'
    };
  }
};

/**
 * Ki·ªÉm tra quy·ªÅn admin c·ªßa user c·ª• th·ªÉ b·∫±ng ID
 * @param userId - ID c·ªßa user c·∫ßn ki·ªÉm tra
 * @returns Promise<AuthResult>
 */
export const checkUserRole = async (userId: string): Promise<AuthResult> => {
  try {
    console.log('üîç [AUTH] Checking user role for ID:', userId);
    
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, email, role, is_active')
      .eq('id', userId)
      .maybeSingle();

    if (userError) {
      console.error('‚ùå [AUTH] Database error:', userError);
      return {
        success: false,
        error: `L·ªói c∆° s·ªü d·ªØ li·ªáu: ${userError.message}`
      };
    }

    if (!userData) {
      return {
        success: false,
        error: 'User kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng'
      };
    }

    const isAdmin = userData.role === 'admin';
    
    return {
      success: true,
      userData,
      isAdmin
    };

  } catch (error: any) {
    console.error('‚ùå [AUTH] Unexpected error:', error);
    return {
      success: false,
      error: error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën'
    };
  }
};

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ users v·ªõi th√¥ng tin role
 * @returns Promise<UserRoleData[]>
 */
export const getAllUsersWithRoles = async (): Promise<UserRoleData[]> => {
  try {
    console.log('üîç [AUTH] Fetching all users with roles...');
    
    const { data: users, error } = await supabase
      .from('users')
      .select('id, email, role, is_active')
      .order('created_at', { ascending: false });

    if (error) {
      console.error('‚ùå [AUTH] Error fetching users:', error);
      throw error;
    }

    console.log('‚úÖ [AUTH] Fetched users:', users?.length || 0);
    return users || [];

  } catch (error: any) {
    console.error('‚ùå [AUTH] Error fetching users:', error);
    throw error;
  }
};

/**
 * C·∫•p quy·ªÅn admin cho user
 * @param userId - ID c·ªßa user c·∫ßn c·∫•p quy·ªÅn
 * @returns Promise<boolean>
 */
export const grantAdminRole = async (userId: string): Promise<boolean> => {
  try {
    console.log('üîë [AUTH] Granting admin role to user:', userId);
    
    const { error } = await supabase
      .from('users')
      .update({ role: 'admin' })
      .eq('id', userId)
      .eq('is_active', true);

    if (error) {
      console.error('‚ùå [AUTH] Error granting admin role:', error);
      return false;
    }

    console.log('‚úÖ [AUTH] Admin role granted successfully');
    return true;

  } catch (error: any) {
    console.error('‚ùå [AUTH] Error granting admin role:', error);
    return false;
  }
};

/**
 * Thu h·ªìi quy·ªÅn admin c·ªßa user (chuy·ªÉn v·ªÅ user th∆∞·ªùng)
 * @param userId - ID c·ªßa user c·∫ßn thu h·ªìi quy·ªÅn
 * @returns Promise<boolean>
 */
export const revokeAdminRole = async (userId: string): Promise<boolean> => {
  try {
    console.log('üîì [AUTH] Revoking admin role from user:', userId);
    
    const { error } = await supabase
      .from('users')
      .update({ role: 'user' })
      .eq('id', userId);

    if (error) {
      console.error('‚ùå [AUTH] Error revoking admin role:', error);
      return false;
    }

    console.log('‚úÖ [AUTH] Admin role revoked successfully');
    return true;

  } catch (error: any) {
    console.error('‚ùå [AUTH] Error revoking admin role:', error);
    return false;
  }
};
